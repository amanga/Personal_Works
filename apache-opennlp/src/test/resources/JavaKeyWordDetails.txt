In front of a <START:java> class <END> keyword, prevents this class to be directly instantiated. In front of a method signature, allows the implementation of this method to be deferred to an inheriting <START:java> class <END>.
<START:java> Assert <END> describes a predicate (a true–false statement) placed in a java-program to indicate that the developer thinks that the predicate is always <START:java> true <END> at that place. If an assertion evaluates to false at run-time, an assertion failure results, which typically causes execution to abort. Optionally enable by ClassLoader method.
Defines a <START:java> boolean <END> variable for the values <START:java> true <END> or false only (NB: "null" as in class Boolean is not allowed).
Defines a <START:java> byte <END> variable representing a sequence of 8 bits. (NB: Only 1-byte-characters can be used, f.i. '€' would produce an error).
A statement in the <START:java> switch <END> block can be labeled with one or more <START:java> case <END> or <START:java> default <END> labels. The <START:java> switch <END> statement evaluates its expression, then executes all statements that follow the matching <START:java> case <END> label; see <START:java> switch <END>.

Used in conjunction with a try block and an optional <START:java> finally <END> block. The statements in the <START:java> catch <END> block specify what to do if a specific type of exception is thrown by the <START:java> try <END> block.
Although reserved as a keyword in Java, <START:java> const <END> is not used and has no function.[2][1] For defining constants in java, see the <START:java> final <END> reserved word.
Used to resume program execution at the end of the current loop body. If followed by a label, continue resumes execution at the end of the enclosing labeled loop body.
The <START:java> do <END> keyword is used in conjunction with while to create a do-while loop, which executes a block of statements associated with the loop and then tests a <START:java> boolean <END> expression associated with the while. If the expression evaluates to <START:java> true <END>, the block is executed again; this continues until the expression evaluates to false.
The else keyword is used in conjunction with if to create an if-else statement, which tests a <START:java> boolean <END> expression; if the expression evaluates to <START:java> true <END>, the block of statements associated with the if are evaluated; if it evaluates to false, the block of statements associated with the else are evaluated.
Used to define a block of statements for a block defined previously by the try keyword. The <START:java> finally <END> block is executed after execution exits the <START:java> try <END> block and any associated <START:java> catch <END> clauses regardless of whether an exception was thrown or caught, or execution left method in the middle of the <START:java> try <END> or <START:java> catch <END> blocks using the <START:java> return <END> keyword.
Although reserved as a keyword in Java, <START:java> goto <END> is not used and has no function.